// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  phone String?
  timezone String?
  address String?
 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]

  createdJob Job[] @relation(name: "JobClient")
  workedJob Job[] @relation(name: "JobDeveloper")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String @map("provider_account_id")
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?   
  token_type        String? 
  scope             String?
  id_token          String? 
  session_state     String? 
  role Role @default(USER)
  isProfileCreated Boolean @default(false) @map("is_profile_created")
 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Job {
  id String @id @default(cuid())
  title String
  description String
  workMode WorkMode @map("work_mode")
  location String
  amount Int?
  clientId String @map("client_id")
  client User @relation(fields: [clientId], references: [id], name: "JobClient")
  isAccepted Boolean @default(false) @map("is_accepted")
  developerId String? @map("developer_id")
  developer User? @relation(fields: [developerId], references: [id], name: "JobDeveloper")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  acceptedAt DateTime? @map("accepted_at")
  completedAt DateTime? @map("completed_at")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

enum WorkMode {
  REMOTE
  HYBRID
  OFFICE
}

enum Role {
  USER
  ADMIN
}